#!/usr/bin/perl
use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../lib";
use Getopt::Long;
use Pod::Usage;
use Perl::Analyzer;

my $source_dir;
my $output_file;
my $verbose = 0;
my $help = 0;
my $with_constants = 0;
my $with_fields = 0;

GetOptions ("source-dir|src=s" => \$source_dir,
            "datafile|data=s" => \$output_file,
            "help|h" => \$help,
            "verbose|v" => \$verbose,
            "with-constants|c" => \$with_constants,
            "with-fields|f" => \$with_fields,
) or die("Error in command line arguments\n");

if ($help) {
    pod2usage(-verbose => 2);
    exit;
}

if (! $source_dir || ! $output_file) {
    pod2usage("Run '$0 --help' to see help page.\n");
    exit;
}

my $source_analyzer = Perl::Analyzer->new(
    'verbose'           => $verbose,
    'with_constants'    => $with_constants,
    'with_fields'       => $with_fields,
);
$source_analyzer->analyze( $source_dir );
$source_analyzer->to_file( $output_file );

exit;

__END__

=head1 NAME

perl-analyzer - Analyze Perl source in given directory

=head1 SYNOPSIS
 
 perl-analyzer --source-dir <source_dir> --datafile <file> [--verbose]
 [--with-constants] [--with-fields]

=head1 OPTIONS

=over 8

=item B<--source-dir, --src>

Directory with Perl source code to analyze.

=item B<--datafile, --data>

Output file with analysis data. Should be used as input file for perl_analyzer_output.

=item B<--verbose>

Print processing information to stdout.

=item B<--with-constants>

Parse 'use constant'.

=item B<--with-fields>

Parse 'use fields'.

=back

=head1 DESCRIPTION

This program performs analysis of Perl source code in given directory
and stores data in output file. These data can be visualized later with
perl_analyzer_output.

=cut
